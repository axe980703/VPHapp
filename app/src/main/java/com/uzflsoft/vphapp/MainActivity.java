package com.uzflsoft.vphapp;

import android.content.Intent;
import android.content.SharedPreferences;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;


public class MainActivity extends AppCompatActivity {

    ListView listView;
    ArrayList<DataModel> dataModels;
    CustomAdapter adapter;

    static Table[] tables;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initTables();


        listView = (ListView) findViewById(R.id.listview);


        dataModels = new ArrayList<>();


        initList();

        adapter = new CustomAdapter(dataModels, this);

        listView.setAdapter(adapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                DataModel dataModel = dataModels.get(position);
                Intent intent = new Intent(MainActivity.this, MiddleMenu.class);
                intent.putExtra("position", position);
                startActivity(intent);

            }
        });



    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.historyButton) {
            Intent intent = new Intent(MainActivity.this, SaveActivity.class);
            startActivity(intent);
        }
        return super.onOptionsItemSelected(item);
    }


    @Override
    protected void onResume() {
        super.onResume();

        for(Table table: tables){
            SaveBoxes(table.getName(), listToString(table.getBoxes()));
        }

        adapter.notifyDataSetChanged();
    }

    public void initTables() {

        List<String> headers = new LinkedList<>();
        headers.add("ВПХ-СП");
        headers.add("ВПХ-СГ");
        headers.add("ВПХ-СС");
        headers.add("ВПХ-П(ОР)");
        headers.add("ВПХ-П(МТ)");
        headers.add("ВПХ-П(Р)");
        headers.add("ВПХ-СУ");
        headers.add("ВПХ-УЛ");
        headers.add("ВПХ-ЭХ");

        List<String> points = new LinkedList<>();
        points.add("1,2,4,7,1,5,8,1,3,7,1,3,6,1,6,1,8,1,2,4,6,1,8,1,3,4,7,9,1,3,4,5,7,8,1,3,4,6,9,1,3,5");
        points.add("1,3,6,8,9,1,6,9,1,3,6,1,6,1,3,5,7,9,1,4,8,9,1,3,5,1,4,1,3,5,1,2,5,1,3,1,2,3,1,2,4,1,2,3,4,1,2,4,1,3,5,8");
        points.add("1,3,6,8,9,1,6,9,6,9,1,4,8,1,5,9,1,2,4,1,6,1,5,7,8,9,1,4,8,9,1,8,1,3,5,1,5,9,1,3,1,3,5,8,1,3,1,3,1,3,1,4,1,3,5,1,3,5,1,3,5,7,1,4,9,1,2,3,1,3,4,1,2,4,1,5");
        points.add("0.05,0.6,0.8,2,2,4,12,13,15,16,19,19,19,19,0.05,6,7,8,0.05,0.1,0.1,0.6,1,3,3,4,10,18,19,0.05,0.6,1,3,3,3,4,7,8,9,12,12,19,0.1,0.6,1,1,2,3,8,9,10,0.1,0.2,1,4,6,12,19,0.05,0.1,0.2,0.2,0.2,0.4,0.6,0.8,0.8,1,1,1,2,2,2,3,3,3,4,4,4,10");
        points.add("0.05,0.2,0.2,0.3,0.3,0.5,0.6,2,7,12,18,19,0.05,0.1,0.3,0.3,0.4,0.5,0.6,1,2,4,5,5,10,14,16,19,0.05,0.1,0.1,0.3,2,4,8,9,15,19,0.05,0.3,0.6,3,7,8,8,8,10,11,14,17,19,0.05,0.1,0.6,2,3,4,5,10,15,19,0.05,0.05,0.1,0.1,0.3,0.3,0.3,0.3,0.3,0.3,9.3,0.4,0.4,0.7,0.9,0.9,0.9,0.9,0.9,1,1,1,1,2,2,2,2,2,2,2,2,2,3,2,2,4,7,8 ");
        points.add("0.05,0.3,0.6,0.7,0.9,0.9,1,1,2,2,3,11,19,0.05,4,4,6,7,0.05,1,2,3,5,10,13,17,0.05,0.5,0.7,1,1,2,2,4,6,6,7,10,10,19,0.05,0.7,1,1,1,2,5,6,8,0.1,0.7,3,6,12,19,0.05,0.05,0.1,0.1,0.1,0.2,0.5,0.5,0.5,0.5,0.5,0.6,1,2,3");
        points.add("0,6,8,10,0,8,0,1,0,1,0,7,0,10,0,9,0,6");
        points.add("0,1,4,8,10,0,10,0,6,0,3,6,0,3,6");
        points.add("0,2,5,0,3,6,0,1,2,6,0,3,6");

        List<String> degrees = new LinkedList<>();
        degrees.add("0 12,13 20,21 31,32 45,45");
        degrees.add("16 22,23 32,33 40,41 50,50");
        degrees.add("27 32,33 49,50 69,70 98,99");
        degrees.add("0.05 0.49,0.5 0.99,1 12,12");
        degrees.add("0.05 0.49,0.5 0.99,1 12,12");
        degrees.add("0.05 0.49,0.5 0.99,1 12,12");
        degrees.add("27 32,33 49,50 69,70 98,99");
        degrees.add("27 32,33 49,50 69,70 98,99");
        degrees.add("0 3,4 5,6");

        tables = new Table[headers.size()];

        for(int i = 0; i < tables.length; i++) {
            tables[i] = new Table();
            tables[i].setName(headers.get(i));
            tables[i].setPoints(stringToList(points.get(i), ","));
            tables[i].setDegree(degrees.get(i));
            tables[i].setBoxes(LoadBoxes(headers.get(i), points.get(i).split(",").length));
        }

        tables[0].setElements(init_1());
        tables[1].setElements(init_2());
        tables[2].setElements(init_3());
        tables[3].setElements(init_4());
        tables[4].setElements(init_5());
        tables[5].setElements(init_6());
        tables[6].setElements(init_7());
        tables[7].setElements(init_8());
        tables[8].setElements(init_9());



    }

    public void initList() {
        for(int i = 0; i < tables.length; i++) {
            tables[i].math();
            dataModels.add(new DataModel(tables[i].getName(), "", tables[i].getValue()));
        }
    }



    public List<Boolean> LoadBoxes(String key, int length) {
        SharedPreferences sharedPreferences = getSharedPreferences("prefs", MODE_PRIVATE);
        String pre = sharedPreferences.getString(key, "2");
        List<Boolean> boxes = new LinkedList<>();
        if(pre.equals("2")) {
            for(int i = 0; i < length; i++)
                boxes.add(false);
            return boxes;
        }
        String arr[] = pre.split(" ");
        for(int i = 0; i < length; i++)
            boxes.add(arr[i].equals("1"));

        return boxes;
    }

    public void SaveBoxes(String key, String value) {
        SharedPreferences sharedPreferences = getSharedPreferences("prefs", MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString(key, value);
        editor.apply();
    }


    private List<Double> stringToList(String s, String seporator) {
        String s1[] = s.split(seporator);
        List<Double> list = new LinkedList<>();
        for(int i = 0; i < s1.length; i++)
            list.add(Double.valueOf(s1[i]));
        return list;
    }

    private String listToString(List<Boolean> list) {
        String s = "";
        for(boolean b: list)
            s += (b? 1 : 0) + " ";
        return s;
    }

    public HashMap<String, List<String>> init_1() {

        HashMap<String, List<String>> VPH_SP = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Кожный покров");
        h.add("Характер внешнего дыхания");
        h.add("Аускультативные изменения в легких");
        h.add("Речевой контакт");
        h.add("Реакция на боль");
        h.add("Зрачковый или роговичный рефлексы");
        h.add("Величина зрачков");
        h.add("Характер пульса");
        h.add(" Частота пульса ( уд/мин.)");
        h.add("Систолическое артериальное давление (мм рт.ст.)");
        h.add("Ориентировочная величина кровопотери ( в мл )");
        h.add("Шумы кишечной перистальтики");

        List<String> l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();
        l6 = new LinkedList<>();
        l7 = new LinkedList<>();
        l8 = new LinkedList<>();
        l9 = new LinkedList<>();
        l10 = new LinkedList<>();
        l11 = new LinkedList<>();
        l12 = new LinkedList<>();

        l1. add("Обычный");
        l1. add("Синюшный");
        l1. add("Бледный" );
        l1. add("Серый" );
        l2. add("Нормальное" );
        l2. add("Частое  (>25 в ')");
        l2. add("Патологическое" );
        l3. add("Отчетливое дыхание" );
        l3. add("Ослабленное дыхание");
        l3. add("Отсутствие дыхания" );
        l4. add("Нормальный" );
        l4. add("Нарушен");
        l4. add("Отсутствует" );
        l5. add("Сохранена");
        l5. add("Отсутствует" );
        l6. add("Сохранен");
        l6. add("Отсутствует" );
        l7. add("Нормальные");
        l7. add("Узкие" );
        l7. add("Анизокория");
        l7. add("Широкие" );
        l8. add("Нет аритмии");
        l8. add("Есть аритмия" );
        l9. add("60 - 80");
        l9. add("81 - 100" );
        l9. add("101 - 140");
        l9. add("< 60 или > 140" );
        l9. add("Не определяется");
        l10. add("101 - 140" );
        l10. add("100 - 90 или > 140");
        l10. add("70 - 89" );
        l10. add("60 - 69");
        l10. add("40 - 59" );
        l11. add("< 40");
        l11.add("< 500" );
        l11.add("501 - 1000");
        l11.add("1001 - 2000" );
        l11.add("2001 - 3000 >" );
        l11.add("3000" );
        l12.add("Отчетливые" );
        l12.add("Ослабленные" );
        l12.add("Отсутствуют" );

        VPH_SP.put(h.get(0), l1);
        VPH_SP.put(h.get(1), l2);
        VPH_SP.put(h.get(2), l3);
        VPH_SP.put(h.get(3), l4);
        VPH_SP.put(h.get(4), l5);
        VPH_SP.put(h.get(5), l6);
        VPH_SP.put(h.get(6), l7);
        VPH_SP.put(h.get(7), l8);
        VPH_SP.put(h.get(8), l9);
        VPH_SP.put(h.get(9), l10);
        VPH_SP.put(h.get(10), l11);
        VPH_SP.put(h.get(11), l12);

        return VPH_SP;

    }
    public HashMap<String, List<String>> init_2() {

        HashMap<String, List<String>> VPH_SG = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Уровень сознания (баллы шкалы ком Глазго)");
        h.add("Характер внешнего дыхания");
        h.add("Аускультативные изменения в легких");
        h.add("Характер пульса");
        h.add("Частота пульса ( уд/мин.)");
        h.add("Систолическое артериальное давление (мм рт.ст.)");
        h.add("Шумы кишечной перистальтики");
        h.add("Билирубин (ммоль/л)");
        h.add("Общий белок (г/л)");
        h.add("Суточный диурез (мл)");
        h.add("Креатинин (ммоль/л)");
        h.add("Температура тела (С')");
        h.add("Эритроциты крови (x 10^12 /л)");
        h.add("Лейкоциты крови (x 10^9 /л)");
        h.add("Палочкоядерные лейкоциты (в %)");
        h.add("Время свёртывания крови по Ли-Уайту");

        List<String> l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();
        l6 = new LinkedList<>();
        l7 = new LinkedList<>();
        l8 = new LinkedList<>();
        l9 = new LinkedList<>();
        l10 = new LinkedList<>();
        l11 = new LinkedList<>();
        l12 = new LinkedList<>();
        l13 = new LinkedList<>();
        l14 = new LinkedList<>();
        l15 = new LinkedList<>();
        l16 = new LinkedList<>();


        l1.add("14-15 - ясное сознание");
        l1.add("11-13 - оглушение");
        l1.add("8-10 - сопор" );
        l1.add("5-7 - поверхностная кома" );
        l1.add("3-4 - глубокая кома" );
        l2.add("нормальное");
        l2.add("частое (> 20 в 1 мин.)" );
        l2.add("патологическое (в т.ч. ВВЛ, ИВЛ)" );
        l3.add("везикулярное дыхание");
        l3.add("ослабленное дыхание");
        l3.add("влажные хрипы");
        l4.add("ослабленное дыхание" );
        l4.add("влажные хрипы" );
        l4.add("нет аритмии" );
        l4.add("есть аритмия" );
        l5.add("60 - 90" );
        l5.add("91 - 100" );
        l5.add("101 - 140" );
        l5.add("< 60 или > 140" );
        l5.add("не определяется" );
        l6.add("100 и более" );
        l6.add("81 - 99" );
        l6.add("61 - 80" );
        l6.add("60 и менее" );
        l7.add("отчетливые" );
        l7.add("ослабленные" );
        l7.add("отсутствуют" );
        l8.add("менее 20,5" );
        l8.add("более 20,5" );
        l9.add("более 60" );
        l9.add("50 – 60" );
        l9.add("менее 50" );
        l10.add("1250-2500" );
        l10.add("более 2500" );
        l10.add("менее 1250" );
        l11.add("0,14 и менее" );
        l11.add("более 0,14" );
        l12.add("36,0 – 37,0" );
        l12.add("37,1 – 38,0" );
        l12.add("менее 36,0 или более 38,0" );
        l13.add("3,0 и более" );
        l13.add("2,9 – 2,6" );
        l13.add("2,5 и менее" );
        l14.add("4,0 – 8,0" );
        l14.add("8,1 – 10,0" );
        l14.add("10,1 – 12,0" );
        l14.add("менее 4,0 или более 12,0" );
        l15.add("менее 10" );
        l15.add("11 - 20 " );
        l15.add("более 20" );
        l16.add("5 – 12" );
        l16.add("12 – 16" );
        l16.add("менее 5" );
        l16.add("более 16 " );


        VPH_SG.put(h.get(0), l1);
        VPH_SG.put(h.get(1), l2);
        VPH_SG.put(h.get(2), l3);
        VPH_SG.put(h.get(3), l4);
        VPH_SG.put(h.get(4), l5);
        VPH_SG.put(h.get(5), l6);
        VPH_SG.put(h.get(6), l7);
        VPH_SG.put(h.get(7), l8);
        VPH_SG.put(h.get(8), l9);
        VPH_SG.put(h.get(9), l10);
        VPH_SG.put(h.get(10), l11);
        VPH_SG.put(h.get(11), l12);
        VPH_SG.put(h.get(12), l13);
        VPH_SG.put(h.get(13), l14);
        VPH_SG.put(h.get(14), l15);
        VPH_SG.put(h.get(15), l16);

        return VPH_SG;

    }
    public HashMap<String, List<String>> init_3() {

        HashMap<String, List<String>> VPH_SP = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Баллы шкалы ком Глазго (сознание)");
        h.add("Характер внешнего дыхания");
        h.add("Газовый состав крови РаО2/FiО2");
        h.add("Газовый состав крови HbО2а (%");
        h.add("Газовый состав крови РаСО2 (мм рт.ст.)");
        h.add("Характер пульса");
        h.add("Частота пульса");
        h.add("Систолическое АД (мм рт.ст.)");
        h.add("Инотропная поддержка (дофамин более 5 мкг x кг/мин)");
        h.add("Ударный индекс (мл/м2)");
        h.add("Эритроциты крови (х 1012/л)");
        h.add("Фибриноген (г/л)");
        h.add("Время свертывания по Ли-Уайту (мин.)");
        h.add("Диурез почасовой (мл/час)");
        h.add("Креатинин (ммоль/л)");
        h.add("Мочевина (ммоль/л)");
        h.add("Общий билирубин (ммоль/л)");
        h.add("Шумы кишечной перистальтики");
        h.add("Общий белок ( г/л )");
        h.add("Средние молекулы, 254 и (или) 280 нм, (кратность увеличения по сравнению с нормой)");
        h.add("Индекс интоксикации мочи");
        h.add("Температура тела (0С)");
        h.add("Лейкоциты крови (х 109/л)");
        h.add("Палочкоядерные лейкоциты (%)");
        h.add("Бактериемия");


        List<String> l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23, l24, l25;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();
        l6 = new LinkedList<>();
        l7 = new LinkedList<>();
        l8 = new LinkedList<>();
        l9 = new LinkedList<>();
        l10 = new LinkedList<>();
        l11 = new LinkedList<>();
        l12 = new LinkedList<>();
        l13 = new LinkedList<>();
        l14 = new LinkedList<>();
        l15 = new LinkedList<>();
        l16 = new LinkedList<>();
        l17 = new LinkedList<>();
        l18 = new LinkedList<>();
        l19 = new LinkedList<>();
        l20 = new LinkedList<>();
        l21 = new LinkedList<>();
        l22 = new LinkedList<>();
        l23 = new LinkedList<>();
        l24 = new LinkedList<>();
        l25 = new LinkedList<>();

        l1. add("14-15 - ясное сознание");
        l1. add("11-13 - оглушение");
        l1. add("8-10 - сопор");
        l1. add("5-7 - поверхностная кома");
        l1. add("3-4 - глубокая кома");
        l2. add("нормальное");
        l2. add("частое (более 20 в 1 мин.)");
        l2. add("патологический ритм");
        l2. add("ВВЛ");
        l2. add("ИВЛ");
        l3. add("более 300");
        l3. add("150-300");
        l3. add("менее 150");
        l4. add("более 94");
        l4. add("93-90");
        l4. add("менее 90");
        l5. add("32-50");
        l5. add("50-60");
        l5. add("более 60 или менее 32");
        l6. add("Нет аритмии");
        l6. add("Есть аритмия");
        l7. add("60-90");
        l7. add("91-140");
        l7. add("менее 60 или более 140");
        l7. add("не определяется на периферических артериях");
        l7. add("не определяется на центральных артериях");
        l8. add("более 100");
        l8. add("81-100");
        l8. add("61-80");
        l8. add("60 и менее");
        l9. add("не проводится");
        l9. add("проводится");
        l10. add("более 40");
        l10. add("28-40");
        l10. add("менее 28");
        l11. add("более 3,0");
        l11. add("3,0-2,6");
        l11. add("менее 2,6");
        l12. add("2,3-4,0");
        l12. add("менее 2,3 или более 4,0");
        l13. add("5-12");
        l13. add("12-16");
        l13. add("менее 5");
        l13. add("более 16");
        l14. add("более 60");
        l14. add("менее 60");
        l15. add("0,14 и менее");
        l15. add("более 0,14");
        l16. add("8,3 и менее");
        l16. add("более 8,3");
        l17. add("20,5 и менее");
        l17. add("более 20,5");
        l18. add("отчетливые");
        l18. add("ослаблены");
        l18. add("отсутствуют");
        l19. add("более 60");
        l19. add("60 - 50");
        l19. add("менее 50");
        l20. add("x 1");
        l20. add("x 2");
        l20. add("x 3");
        l20. add("x 4 и более");
        l21. add("БОЛЬШЕ индекса интоксикации крови");
        l21. add("РАВЕН индексу интоксикации крови или МЕНЬШЕ его на 50 и менее %");
        l21. add("МЕНЬШЕ индекса интоксикации крови на 50 и более %");
        l22. add("35,9-37,0");
        l22. add("37,1-38,0");
        l22. add("менее 35,9 или более 38,0");
        l23. add("4,0 - 8,0");
        l23. add("8,1 - 12,0");
        l23. add("более 12,0 или менее 4,0");
        l24. add("менее 10");
        l24. add("11 – 20");
        l24. add("более 20");
        l25. add("не определяется, и нет явно инфекционного очага");
        l25. add("определяется, и/или явно есть инфекционный очаг");


        VPH_SP.put(h.get(0), l1);
        VPH_SP.put(h.get(1), l2);
        VPH_SP.put(h.get(2), l3);
        VPH_SP.put(h.get(3), l4);
        VPH_SP.put(h.get(4), l5);
        VPH_SP.put(h.get(5), l6);
        VPH_SP.put(h.get(6), l7);
        VPH_SP.put(h.get(7), l8);
        VPH_SP.put(h.get(8), l9);
        VPH_SP.put(h.get(9), l10);
        VPH_SP.put(h.get(10), l11);
        VPH_SP.put(h.get(11), l12);
        VPH_SP.put(h.get(12), l13);
        VPH_SP.put(h.get(13), l14);
        VPH_SP.put(h.get(14), l15);
        VPH_SP.put(h.get(15), l16);
        VPH_SP.put(h.get(16), l17);
        VPH_SP.put(h.get(17), l18);
        VPH_SP.put(h.get(18), l19);
        VPH_SP.put(h.get(19), l20);
        VPH_SP.put(h.get(20), l21);
        VPH_SP.put(h.get(21), l22);
        VPH_SP.put(h.get(22), l23);
        VPH_SP.put(h.get(23), l24);
        VPH_SP.put(h.get(24), l25);

        return VPH_SP;

    }
    public HashMap<String, List<String>> init_4() {

        HashMap<String, List<String>> VPH_P_OR = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Голова");
        h.add("Шея");
        h.add("Грудь");
        h.add("Живот");
        h.add("Таз");
        h.add("Позвоночник");
        h.add("Конечности");

        List<String> l1, l2, l3, l4, l5, l6, l7;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();
        l6 = new LinkedList<>();
        l7 = new LinkedList<>();

        l1. add("Ограниченные раны мягких тканей головы");
        l1. add("Непроникающие раны черепа без повреждений головного мозга");
        l1. add("Непроникающие раны черепа с нетяжелым повреждением головного мозга");
        l1. add("Проникающие раны черепа с нетяжелым повреждением головного мозга");
        l1. add("Непроникающие раны черепа с нетяжелым повреждением и сдавлением головного мозга");
        l1. add("Проникающие раны черепа с нетяжелым повреждением и сдавлением головного мозга");
        l1. add("Непроникающие раны черепа с тяжелым повреждением головного мозга");
        l1. add("Проникающие раны черепа с тяжелым повреждением головного мозга");
        l1. add("Непроникающие раны черепа с тяжелым повреждением и сдавлением головного мозга");
        l1. add("Проникающие раны черепа с тяжелым повреждением и сдавлением головного мозга");
        l1. add("Непроникающие раны черепа с крайнетяжелым повреждением головного мозга");
        l1. add("Непроникающие раны черепа с крайнетяжелым повреждением и сдавлением головного мозга");
        l1. add("Проникающие раны черепа с крайне тяжелым повреждением головного мозга");
        l1. add("Проникающие раны черепа с крайне тяжелым повреждением и сдавлением головного мозга");
        l2. add("Ограниченные раны мягких тканей шеи");
        l2. add("Повреждение магистральных сосудов шеи");
        l2. add("Повреждение пищевода");
        l2. add("Повреждение гортани");
        l3. add("Ограниченные раны мягких тканей груди");
        l3. add("Одиночные переломы ребер (до трех)");
        l3. add("Перелом лопатки");
        l3. add("Обширные раны непроникающие мягких тканей груди");
        l3. add("Проникающие раны груди с гемопневнотораксом");
        l3. add("Проникающие раны груди с открытым пневмотораксом");
        l3. add("Проникающие раны груди с напряженным пневматораксом");
        l3. add("Проникающие раны груди с двусторонним гемопневмотораксом");
        l3. add("Проникающие раны груди с внутриплевральным кровотечением");
        l3. add("Проникающие раны груди с повреждением корня лёгкого или магистральных сосудов");
        l3. add("Проникающие раны груди с повреждением сердца");
        l4. add("Ограниченные раны мягких тканей живота");
        l4. add("Повреждение внеорганных образований брюшной полости");
        l4. add("Повреждение печени");
        l4. add("Повреждение селезенки");
        l4. add("Повреждение почки");
        l4. add("Повреждение тонкой кишки");
        l4. add("Повреждение двух паренхиматозных органов");
        l4. add("Повреждение полого и паренхиматозного органов");
        l4. add("Повреждение толстой кишки");
        l4. add("Повреждение тонкой и толстой кишок");
        l4. add("Повреждение поджелудочной железы");
        l4. add("Повреждение трех и более органов брюшной полости");
        l4. add("Повреждение аорты, нижней полой, печеночной или воротной вен");
        l5. add("Ограниченные раны мягких тканей таза");
        l5. add("Переломы костей таза");
        l5. add("Обширные раны мягких тканей таза");
        l5. add("Повреждения наружных половых органов");
        l5. add("Повреждения уретры");
        l5. add("Повреждения мочевого пузыря");
        l5. add("Повреждения прямой кишки");
        l5. add("Повреждения нескольких тазовых органов");
        l5. add("Повреждения крупных сосудов тазовой области");
        l6. add("Паравертебральные раны");
        l6. add("Переломы поперечных или остистых отростков позвонков");
        l6. add("Переломы тел позвонков без повреждения спинного мозга");
        l6. add("Частичное повреждение спинного мозга");
        l6. add("Полное повреждение спинного мозга в поясничном и нижнегрудном отделах");
        l6. add("Полное повреждение спинного мозга в верхнегрудном и нижнешейном отделе");
        l6. add("Полное повреждение спинного мозга в верхнешейном отделе");
        l7. add("Ограниченные раны мягких тканей конечностей");
        l7. add("Непроникающие раны крупных суставов");
        l7. add("Ограниченные раны мягких тканей стопы");
        l7. add("Краевые и дырчатые переломы длинных костей");
        l7. add("Проникающие раны мелких суставов");
        l7. add("Ограниченные раны мягких тканей и костей кисти");
        l7. add("Обширные раны мягких тканей конечностей");
        l7. add("Ограниченные раны мягких тканей и костей стопы");
        l7. add("Переломы коротких костей, костей предплечья");
        l7. add("Проникающие раны крупных суставов");
        l7. add("Перелом плеча");
        l7. add("Обширные раны мягких тканей и костей кисти");
        l7. add("Перелом голени");
        l7. add("Обширные раны мягких тканей и костей стопы");
        l7. add("Повреждение крупных нервов");
        l7. add("Отрыв кисти, стопы");
        l7. add("Отрыв предплечья");
        l7. add("Перелом бедра");
        l7. add("Повреждение магистральных сосудов конечностей");
        l7. add("Отрыв плеча");
        l7. add("Отрыв голени");
        l7. add("Отрыв бедра");



        VPH_P_OR.put(h.get(0), l1);
        VPH_P_OR.put(h.get(1), l2);
        VPH_P_OR.put(h.get(2), l3);
        VPH_P_OR.put(h.get(3), l4);
        VPH_P_OR.put(h.get(4), l5);
        VPH_P_OR.put(h.get(5), l6);
        VPH_P_OR.put(h.get(6), l7);

        return VPH_P_OR;

    }
    public HashMap<String, List<String>> init_5() {

        HashMap<String, List<String>> VPH_P_MT = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Голова");
        h.add("Грудь");
        h.add("Живот");
        h.add("Таз");
        h.add("Позвоночник");
        h.add("Конечности");

        List<String> l1, l2, l3, l4, l5, l6;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();
        l6 = new LinkedList<>();

        l1. add("Раны мягких тканей головы");
        l1. add("Закрытые переломы костей носа");
        l1. add("Сотрясение головного мозга");
        l1. add("Переломы челюстей");
        l1. add("Ушиб головного мозга легкой степени");
        l1. add("Ушиб головного мозга средней степени тяжести с переломами свода черепа");
        l1. add("Ушиб головного мозга средней степени тяжести с закр.переломами свода и осн.черепа");
        l1. add("Ушиб головного мозга средней степени тяжести с откр.переломомами свода и основания черепа");
        l1. add("Сдавление головного мозга на фоне нетяжелых ушибов");
        l1. add("Тяжелый ушиб головного мозга с повреждением верхних отделов ствола");
        l1. add("Сдавление головного мозга на фоне тяжелых ушибов");
        l1. add("Тяжелый ушиб головного мозга с повреждением нижних отделов ствола");
        l2. add("Раны мягких тканей, ушибы");
        l2. add("Одиночные переломы ребер (до 3х)");
        l2. add("Переломы грудины");
        l2. add("Множественные односторонние переломы ребер (более 3х )");
        l2. add("Односторонние переломы ребер с гемотораксом");
        l2. add("Множественные двусторонние переломы ребер без клапана, без повреждения полостей");
        l2. add("Сдавление груди с травматической асфиксией");
        l2. add("Ушиб легких");
        l2. add("Множественные односторонние переломы ребер с разрывом легкого, пневмоторакс");
        l2. add("Ушиб сердца");
        l2. add("Задний или задене-боковой реберный клапан");
        l2. add("Двусторонние множественные переломы ребер с поврежден. одной плевральной полости, разрывом одного легкого");
        l2. add("Передний и передне-боковой реберный клапан");
        l2. add("Повреждение обоих легких, обоих плевральных полостей");
        l2. add("Разрыв главного бронха");
        l2. add("Разрыв аорты, сердца, отрыв легкого, повреждение крупных сосудов");
        l3. add("Ушибы и мелкие раны брюшной стенки");
        l3. add("Ушибы почек");
        l3. add("Повреждения  внеорганных  образований,  потребовавшие лапаротомии");
        l3. add("Краевые повреждения паренхиматозных органов");
        l3. add("Разрывы одного паренхиматозного органа");
        l3. add("Разрывы или отрывы полых органов");
        l3. add("Повреждение диафрагмы с/без повреждения органов");
        l3. add("Повреждение 2-х органов, одно из которых - нетяжелое");
        l3. add("Повреждение 3-х органов (2-х - паренхиматозных)");
        l3. add("Повреждение аорты, нижней полой, печеночной и воротной вен");
        l4. add("Ушибы и мелкие раны мягких тканей");
        l4. add("Изолированные стабильные переломы костей таза");
        l4. add("Множественные стабильные переломы костей таза с нарушением целости тазового кольца в  1-м месте");
        l4. add("Множественные ротационно-нестабильные переломы костей таза, у гемодинамически стабильных пострадавших");
        l4. add("Множественные ротационно-нестабильные переломы костей таза, у гемодинамически нестабильных пострадавших");
        l4. add("Множественные ротационно-нестабильные переломы костей таза с разрывом органов - внебрюшинные");
        l4. add("Множественные ротационно-нестабильные переломы костей таза с разрывом органов - внутрибрюшинные");
        l4. add("Множественные переломы костей таза с  центральным вывихом бедра без повреждения органов");
        l4. add("Множественные вертикально-нестабильные переломы костей таза");
        l4. add("Множественные вертикально-нестабильные переломы костей таза со смещением тазового кольца, с разрывом органов");
        l4. add("Разрушение костей таза без повреждения тазовых органов");
        l4. add("Разрушение костей таза с разрывом 1-го тазового органа");
        l4. add("Разрушение костей таза с разрывом 2-х тазовых органов");
        l5. add("Ушибы и мелкие раны области позвоночника");
        l5. add("Переломы остистых и поперечных отростков позвонков");
        l5. add("Компрессионный стабильный перелом  тела 1-го позвонка");
        l5. add("Компрессионные стабильные переломы тел 2-х и более позвонков или 1-го с подвывихом");
        l5. add("Частичное повреждение спинного мозга в любом отделе");
        l5. add("Полное повреждение спинного мозга в поясничном отделе");
        l5. add("Полное повреждение спинного мозга в нижнее-грудном отделе");
        l5. add("Полное повреждение спинного мозга в верхнее-грдном отделе");
        l5. add("Полное повреждение спинного мозга в нижнее-шейном отделе");
        l5. add("Полное повреждение верхне-шейного отдела спинного мозга");
        l6. add("Ограниченные раны мягких тканей");
        l6. add("Ушибы мягких тканей");
        l6. add("Ушибы суставов с гемартрозом");
        l6. add("Отрыв одного пальца, фаланги");
        l6. add("Повреждения менисков или связок коленного или голеностопного суставов");
        l6. add("Вывих плеча, предплечья, ключично-акромиального сочл");
        l6. add("Одиночные переломы костей кисти");
        l6. add("Одиночные переломы костей стопы");
        l6. add("Вколоченный перелом хирургической шейки плеча");
        l6. add("Переломы коротких костей мыщелков, вертелов, бугорков без смещения");
        l6. add("Переломы коротких костей, вертелов, мыщелков, бугорков со смещением");
        l6. add("Множественные переломы костей стопы");
        l6. add("Множественные переломы костей кисти");
        l6. add("Двух-трех лодыжечные переломы голени");
        l6. add("Закрытый вывих бедра, голени, открытый вывих стопы");
        l6. add("Переломы пяточной или таранной костей");
        l6. add("Открытый по типу перфорации или закрытый перелом голени");
        l6. add("Открытый по типу перфорации или закрытый перелом плеча");
        l6. add("Открытый по типу перфорации или закрытый перелом предплечья");
        l6. add("Обширное повреждение мягких тканей предплечья, кисти, стопы");
        l6. add("Переломы костей кисти, стопы с обширным повреждением мягких тканей");
        l6. add("Отрывы пальцев кисти (3-5)");
        l6. add("Открытый перелом голени");
        l6. add("Открытый перелом плеча");
        l6. add("Открытый перелом предплечья");
        l6. add("Открытый перелом с обширным повреждением мягких тканей и нервных стволов");
        l6. add("Отрыв стопы");
        l6. add("Отрыв кисти");
        l6. add("Отрыв предплечья");
        l6. add("Открытый по типу перфорации перелом бедра");
        l6. add("Закрытый перелом бедра");
        l6. add("Медиальный перелом шейки бедра");
        l6. add("Отрыв голени");
        l6. add("Отрыв плеча");
        l6. add("Обширное повреждение мягких тканей сегмента, отслойка   кожи с/без перелома длинной кости");
        l6. add("Отрыв бедра");
        l6. add("Обширные повреждения мягких тканей бедра или повреждение бедренной артерии");


        VPH_P_MT.put(h.get(0), l1);
        VPH_P_MT.put(h.get(1), l2);
        VPH_P_MT.put(h.get(2), l3);
        VPH_P_MT.put(h.get(3), l4);
        VPH_P_MT.put(h.get(4), l5);
        VPH_P_MT.put(h.get(5), l6);

        return VPH_P_MT;

    }
    public HashMap<String, List<String>> init_6() {

        HashMap<String, List<String>> VPH_P_R = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Голова");
        h.add("Шея");
        h.add("Грудь");
        h.add("Живот");
        h.add("Таз");
        h.add("Позвоночник");
        h.add("Конечности");

        List<String> l1, l2, l3, l4, l5, l6, l7;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();
        l6 = new LinkedList<>();
        l7 = new LinkedList<>();

        l1. add("Ограниченные и множественные раны мягких тканей волосистой части головы, поверхностные раны лица");
        l1. add("Проникающие ранения полости рта");
        l1. add("Ограниченные и множественные раны мягких тканей лица с повреждением лицевого нерва");
        l1. add("Ранение слезных протоков и/или несквозные раны век (без повреждения свободного края)");
        l1. add("Ампутация ушной раковины");
        l1. add("Сквозные ранения или ранение свободного края век, непроникающее ранение глазного яблока");
        l1. add("Проникающее ранения околоносовых пазух");
        l1. add("Проникающие ранения полости рта с повреждением слюнных желез и/или протоков");
        l1. add("Проникающие ранения глазного яблока, глазницы со значительным снижением остроты зрения (на 50 и более %)");
        l1. add("Непроникающие ранения черепа без повреждения головного мозга");
        l1. add("Проникающие ранения черепа с нетяжелым повреждением головного мозга");
        l1. add("Проникающие раны черепа с тяжелым повреждением головного мозга");
        l1. add("Проникающие раны черепа с крайне тяжелым повреждением головного мозга");
        l2. add("Ограниченные раны мягких тканей шеи");
        l2. add("Повреждение магистральных сосудов шеи");
        l2. add("Повреждение крупных нервных образований");
        l2. add("Повреждение пищевода");
        l2. add("Повреждение гортани, трахеи");
        l3. add("Ограниченные раны мягких тканей груди");
        l3. add("Проникающие раны груди с гемопневмотораксом");
        l3. add("Проникающие раны груди с открытым пневмотораксом");
        l3. add("Проникающие раны груди с напряженным пневмотораксом");
        l3. add("Проникающие раны груди с ранением перикарда");
        l3. add("Проникающие раны груди с внутриплевральным кровотечением");
        l3. add("Проникающие раны груди с ранением сердца");
        l3. add("Проникающие раны груди с ранением корня легкого или магистральных сосудов");
        l4. add("Ограниченные раны мягких тканей живота");
        l4. add("Проникающие ранения живота с повреждением внеорганных образований брюшной полости");
        l4. add("Поверхностные ранения печени");
        l4. add("Глубокие ранения печени");
        l4. add("Повреждение тонкой кишки");
        l4. add("Ранение селезенки");
        l4. add("Ранение почки");
        l4. add("Повреждение двух паренхиматозных органов");
        l4. add("Повреждение толстой кишки");
        l4. add("Повреждение полого и паренхиматозного органов");
        l4. add("Повреждение тонкой и толстой кишок");
        l4. add("Ранение поджелудочной железы");
        l4. add("Ранение трех и более органов брюшной полости");
        l4. add("Ранение аорты, нижней полой, печеночной или воротной вен");
        l5. add("Ограниченные раны мягких тканей таза");
        l5. add("Множественные и/или обширные раны мягких тканей таза");
        l5. add("Ранения ягодичной области с повреждением ягодичных артерий");
        l5. add("Ранения наружных половых органов");
        l5. add("Повреждение уретры");
        l5. add("Повреждение мочевого пузыря");
        l5. add("Повреждение прямой кишки");
        l5. add("Повреждение нескольких тазовых органов");
        l5. add("Повреждение крупных сосудов тазовой области");
        l6. add("Паравертебральные раны");
        l6. add("Поникающие ранения позвоночника без повреждения спинного мозга");
        l6. add("Частичное повреждение спинного мозга");
        l6. add("Полное повреждение спинного мозга в поясничном отделе");
        l6. add("Полное повреждение спинного мозга в грудном отделе");
        l6. add("Полное повреждение спинного мозга в шейном отделе");
        l7. add("Ограниченные раны мягких тканей конечностей");
        l7. add("Непроникающие раны крупных суставов");
        l7. add("Ограниченные раны мягких тканей стопы");
        l7. add("Проникающие раны мелких суставов");
        l7. add("Ампутация 1-2 пальцев, фаланг");
        l7. add("Ограниченные раны мягких тканей кисти и/или лучезапястного сустава");
        l7. add("Ограниченные раны мягких тканей стопы и/или голеностопного сустава");
        l7. add("Проникающие раны крупных суставов");
        l7. add("Обширные раны мягких тканей кисти");
        l7. add("Обширные раны мягких тканей стопы");
        l7. add("Ампутация 3-5 пальцев кисти/стопы");
        l7. add("Обширные и/или множественные раны мягких тканей конечностей");
        l7. add("Повреждение крупных нервов");
        l7. add("Ампутация кисти, стопы");
        l7. add("Повреждение магистральных сосудов конечностей");


        VPH_P_R.put(h.get(0), l1);
        VPH_P_R.put(h.get(1), l2);
        VPH_P_R.put(h.get(2), l3);
        VPH_P_R.put(h.get(3), l4);
        VPH_P_R.put(h.get(4), l5);
        VPH_P_R.put(h.get(5), l6);
        VPH_P_R.put(h.get(6), l7);

        return VPH_P_R;

    }
    public HashMap<String, List<String>> init_7() {

        HashMap<String, List<String>> VPH_SU = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Травма груди");
        h.add("Аритмия пульса");
        h.add("Центральное венозное давление");
        h.add("Креатинкиназа фракция МВ");
        h.add("ЭКГ признаки нарушения ритма");
        h.add("Подъем сегмента ST выше изолинии");
        h.add("Отсутствие зубца R в грудных отведениях");
        h.add("Дугообразное сниж. сегмента ST ниже изолинии в станд. отвед.");


        List<String> l1, l2, l3, l4, l5, l6, l7, l8;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();
        l6 = new LinkedList<>();
        l7 = new LinkedList<>();
        l8 = new LinkedList<>();

        l1. add("Нет");
        l1. add("Множественные переломы ребер");
        l1. add("Перелом грудины" );
        l1. add("«Реберный клапан»" );
        l2. add("Нет");
        l2. add("Есть");
        l3. add("Менее 10 см вод.ст.");
        l3. add("Более 10 см вод.ст.");
        l4. add("Менее 12.5 ммоль/л");
        l4. add("Более 12.5 ммоль/л");
        l5. add("Нет");
        l5. add("Есть");
        l6. add("Нет");
        l6. add("Есть");
        l7. add("Нет");
        l7. add("Есть");
        l8. add("Нет");
        l8. add("Есть");

        VPH_SU.put(h.get(0), l1);
        VPH_SU.put(h.get(1), l2);
        VPH_SU.put(h.get(2), l3);
        VPH_SU.put(h.get(3), l4);
        VPH_SU.put(h.get(4), l5);
        VPH_SU.put(h.get(5), l6);
        VPH_SU.put(h.get(6), l7);
        VPH_SU.put(h.get(7), l8);

        return VPH_SU;

    }
    public HashMap<String, List<String>> init_8() {

        HashMap<String, List<String>> VPH_UL = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Повреждение грудной стенки");
        h.add("Данные бронхофиброскопии");
        h.add("Данные рентгенодиагностики");
        h.add("Насыщение гемоглобина артериальной крови кислородом в %");
        h.add("Частота дыхательных движений в минуту");


        List<String> l1, l2, l3, l4, l5;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();
        l5 = new LinkedList<>();

        l1. add("Нет");
        l1. add("Перелом лопатки");
        l1. add("Множественные двойные переломы ребер");
        l1. add("Переломы первых двух ребер, перелом грудины");
        l1. add("Передний или переднебоковой реберный клапан");
        l2. add("Нет признаков ушиба легких");
        l2. add("Есть признаки ушиба легких");
        l3. add("Нет признаков ушиба легких");
        l3. add("Есть признаки ушиба легких");
        l4. add("94-100");
        l4. add("90-93");
        l4. add("менее 90");
        l5. add("До 20");
        l5. add("20-30");
        l5. add("Больше 30 или ИВЛ");

        VPH_UL.put(h.get(0), l1);
        VPH_UL.put(h.get(1), l2);
        VPH_UL.put(h.get(2), l3);
        VPH_UL.put(h.get(3), l4);
        VPH_UL.put(h.get(4), l5);

        return VPH_UL;

    }
    public HashMap<String, List<String>> init_9() {

        HashMap<String, List<String>> VPH_EH = new LinkedHashMap<>();

        List<String> h = new LinkedList<>();
        h.add("Систолическое АД");
        h.add("Насыщение гемоглобина артериальной крови кислородом");
        h.add("Тяжесть состояния по шкале ВПХ-СП");
        h.add("Время свертывания крови по Ли-Уайту");


        List<String> l1, l2, l3, l4;
        l1 = new LinkedList<>();
        l2 = new LinkedList<>();
        l3 = new LinkedList<>();
        l4 = new LinkedList<>();

        l1. add("Более 100 мм рт. ст.");
        l1. add("90-100 мм рт. ст.");
        l1. add("Менее 90 мм рт. ст");
        l2. add("Более 94%");
        l2. add("93% - 90%");
        l2. add("Менее 90%");
        l3. add("Менее 20 баллов");
        l3. add("21-31 балл");
        l3. add("32-45 баллов");
        l3. add("Более 45 баллов");
        l4. add("Менее 16 мин");
        l4. add("16-30 мин");
        l4. add("Более 30 мин. или не определяется");

        VPH_EH.put(h.get(0), l1);
        VPH_EH.put(h.get(1), l2);
        VPH_EH.put(h.get(2), l3);
        VPH_EH.put(h.get(3), l4);

        return VPH_EH;

    }


}
